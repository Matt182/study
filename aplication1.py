"""
Provided code for Application portion of Module 1
Imports physics citation graph
"""

# general imports
import urllib2
#import simpleplot
import math
import pylab

# Set timeout for CodeSkulptor if necessary
#import codeskulptor
#codeskulptor.set_timeout(20)


###################################
# Code for loading citation graph

CITATION_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_phys-cite.txt"

def load_graph(graph_url):
    """
    Function that loads a graph given the URL
    for a text representation of the graph

    Returns a dictionary that models a graph
    """
    graph_file = urllib2.urlopen(graph_url)
    graph_text = graph_file.read()
    graph_lines = graph_text.split('\n')
    graph_lines = graph_lines[ : -1]

    print "Loaded graph with", len(graph_lines), "nodes"

    answer_graph = {}
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        answer_graph[node] = set([])
        for neighbor in neighbors[1 : -1]:
            answer_graph[node].add(int(neighbor))

    return answer_graph

def compute_in_degrees(digraph):
    result = {}
    res = []
    for val in digraph:
        result[val] = 0
    for node in digraph.values():
        for edge in node:
            result[edge] += 1
    return result

def in_degree_distribution(digraph):
    """
    compure unnormalize distribution
    means that all values are ints not floats
    """
    length = len(digraph)
    indeg = compute_in_degrees(digraph)
    vals = indeg.values()
    setlist = set(vals)
    result = {}
    for i in setlist:
        result[i] = 0
    for i in setlist:
        result[i] = vals.count(i) / float(length)
    return result

#citation_graph = load_graph(CITATION_URL)
#distr = in_degree_distribution(citation_graph)
distr = {0: 0.16543032049, 1: 0.136370183651, 2: 0.0971912135398, 3: 0.0718041051494, 4: 0.0589845156644, 5: 0.0477853799064, 6: 0.0409794742528, 7: 0.0324450846237, 8: 0.0296723082463, 9: 0.024846957148, 10: 0.0212819589485, 11: 0.0189773136478, 12: 0.0173928700036, 13: 0.016096507022, 14: 0.0147281238747, 15: 0.0115952466691, 16: 0.0105509542672, 17: 0.00986676269355, 18: 0.0100108030248, 19: 0.0090025207058, 20: 0.00799423838675, 21: 0.00666186532229, 22: 0.00666186532229, 23: 0.00583363341736, 24: 0.00576161325171, 25: 0.00489737126395, 26: 0.00460929060137, 27: 0.00453727043572, 28: 0.0049693914296, 29: 0.00435722002161, 30: 0.0045012603529, 31: 0.00316888728844, 32: 0.00360100828232, 33: 0.00316888728844, 34: 0.00244868563198, 35: 0.00309686712279, 36: 0.00237666546633, 37: 0.0029528267915, 38: 0.00270075621174, 39: 0.00237666546633, 40: 0.00187252430681, 41: 0.00259272596327, 42: 0.00190853438963, 43: 0.0024846957148, 44: 0.00180050414116, 45: 0.0020165646381, 46: 0.00187252430681, 47: 0.00158444364422, 48: 0.00104429240187, 49: 0.00172848397551, 50: 0.00122434281599, 51: 0.00118833273317, 52: 0.00115232265034, 53: 0.00111631256752, 54: 0.00118833273317, 55: 0.00104429240187, 56: 0.00126035289881, 57: 0.00104429240187, 58: 0.000972272236226, 59: 0.00104429240187, 60: 0.00090025207058, 61: 0.00090025207058, 62: 0.00100828231905, 63: 0.000828231904933, 64: 0.000936262153403, 65: 0.000828231904933, 66: 0.000756211739287, 67: 0.000828231904933, 68: 0.000864241987757, 69: 0.000684191573641, 70: 0.00079222182211, 71: 0.000756211739287, 72: 0.000360100828232, 73: 0.000612171407994, 74: 0.000468131076701, 75: 0.000684191573641, 76: 0.000648181490817, 77: 0.000540151242348, 78: 0.000288080662586, 79: 0.000864241987757, 80: 0.000324090745409, 81: 0.000432120993878, 82: 0.000540151242348, 83: 0.000288080662586, 84: 0.000396110911055, 85: 0.000504141159525, 86: 0.000252070579762, 87: 0.000468131076701, 88: 0.000360100828232, 89: 0.000504141159525, 90: 0.000216060496939, 91: 0.000252070579762, 92: 0.000360100828232, 93: 0.000180050414116, 94: 0.000612171407994, 95: 0.000360100828232, 96: 0.000360100828232, 97: 0.000360100828232, 98: 0.000144040331293, 99: 0.000324090745409, 100: 0.000252070579762, 101: 0.000324090745409, 102: 0.000324090745409, 103: 0.000144040331293, 104: 0.000216060496939, 105: 0.000288080662586, 106: 0.000360100828232, 107: 0.000288080662586, 108: 0.000216060496939, 109: 0.000288080662586, 110: 0.000180050414116, 111: 0.000180050414116, 112: 0.00010803024847, 113: 0.000324090745409, 114: 0.000288080662586, 115: 0.000180050414116, 116: 0.000216060496939, 117: 0.00010803024847, 118: 0.000288080662586, 119: 0.000180050414116, 120: 7.20201656464e-05, 121: 0.000180050414116, 122: 0.00010803024847, 123: 0.000144040331293, 124: 0.000216060496939, 125: 0.000180050414116, 126: 0.000180050414116, 127: 7.20201656464e-05, 129: 0.000180050414116, 130: 3.60100828232e-05, 131: 0.000144040331293, 132: 3.60100828232e-05, 133: 0.000216060496939, 134: 0.00010803024847, 135: 3.60100828232e-05, 136: 0.000216060496939, 137: 0.00010803024847, 138: 0.00010803024847, 139: 0.000144040331293, 140: 3.60100828232e-05, 141: 0.000144040331293, 142: 0.000216060496939, 143: 0.00010803024847, 144: 0.000180050414116, 145: 0.00010803024847, 146: 0.00010803024847, 147: 3.60100828232e-05, 148: 0.000216060496939, 149: 0.000144040331293, 150: 0.000144040331293, 151: 0.000180050414116, 152: 7.20201656464e-05, 153: 0.00010803024847, 154: 0.000144040331293, 155: 0.000144040331293, 156: 7.20201656464e-05, 157: 0.000144040331293, 158: 0.00010803024847, 159: 0.000180050414116, 160: 3.60100828232e-05, 162: 7.20201656464e-05, 164: 0.00010803024847, 165: 3.60100828232e-05, 167: 7.20201656464e-05, 168: 3.60100828232e-05, 169: 7.20201656464e-05, 171: 7.20201656464e-05, 172: 0.000216060496939, 173: 7.20201656464e-05, 174: 7.20201656464e-05, 175: 3.60100828232e-05, 176: 7.20201656464e-05, 177: 7.20201656464e-05, 178: 7.20201656464e-05, 179: 7.20201656464e-05, 180: 3.60100828232e-05, 181: 3.60100828232e-05, 182: 3.60100828232e-05, 183: 3.60100828232e-05, 184: 3.60100828232e-05, 185: 3.60100828232e-05, 186: 0.00010803024847, 187: 3.60100828232e-05, 188: 7.20201656464e-05, 189: 3.60100828232e-05, 190: 0.00010803024847, 191: 7.20201656464e-05, 192: 7.20201656464e-05, 193: 7.20201656464e-05, 194: 7.20201656464e-05, 196: 0.00010803024847, 197: 7.20201656464e-05, 198: 3.60100828232e-05, 199: 3.60100828232e-05, 201: 0.00010803024847, 204: 0.00010803024847, 205: 0.000144040331293, 208: 7.20201656464e-05, 211: 3.60100828232e-05, 212: 3.60100828232e-05, 213: 3.60100828232e-05, 214: 3.60100828232e-05, 217: 3.60100828232e-05, 219: 3.60100828232e-05, 220: 7.20201656464e-05, 222: 7.20201656464e-05, 223: 0.000144040331293, 224: 3.60100828232e-05, 225: 3.60100828232e-05, 228: 7.20201656464e-05, 229: 0.00010803024847, 230: 7.20201656464e-05, 232: 0.00010803024847, 233: 7.20201656464e-05, 235: 3.60100828232e-05, 240: 3.60100828232e-05, 242: 7.20201656464e-05, 244: 3.60100828232e-05, 247: 7.20201656464e-05, 251: 3.60100828232e-05, 252: 3.60100828232e-05, 257: 7.20201656464e-05, 264: 3.60100828232e-05, 265: 3.60100828232e-05, 268: 3.60100828232e-05, 273: 3.60100828232e-05, 274: 3.60100828232e-05, 282: 7.20201656464e-05, 290: 3.60100828232e-05, 295: 3.60100828232e-05, 297: 3.60100828232e-05, 301: 0.00010803024847, 304: 3.60100828232e-05, 308: 3.60100828232e-05, 314: 3.60100828232e-05, 315: 3.60100828232e-05, 325: 7.20201656464e-05, 327: 7.20201656464e-05, 328: 7.20201656464e-05, 329: 7.20201656464e-05, 331: 3.60100828232e-05, 333: 3.60100828232e-05, 337: 3.60100828232e-05, 340: 3.60100828232e-05, 341: 3.60100828232e-05, 344: 3.60100828232e-05, 347: 3.60100828232e-05, 373: 3.60100828232e-05, 380: 7.20201656464e-05, 383: 3.60100828232e-05, 385: 3.60100828232e-05, 388: 3.60100828232e-05, 406: 3.60100828232e-05, 411: 3.60100828232e-05, 421: 3.60100828232e-05, 424: 3.60100828232e-05, 426: 3.60100828232e-05, 427: 3.60100828232e-05, 438: 3.60100828232e-05, 456: 3.60100828232e-05, 467: 3.60100828232e-05, 475: 3.60100828232e-05, 494: 3.60100828232e-05, 520: 3.60100828232e-05, 651: 3.60100828232e-05, 701: 3.60100828232e-05, 748: 3.60100828232e-05, 775: 3.60100828232e-05, 788: 7.20201656464e-05, 807: 3.60100828232e-05, 1006: 3.60100828232e-05, 1032: 3.60100828232e-05, 1114: 3.60100828232e-05, 1144: 3.60100828232e-05, 1155: 3.60100828232e-05, 1199: 3.60100828232e-05, 1299: 3.60100828232e-05, 1641: 3.60100828232e-05, 1775: 3.60100828232e-05, 2414: 3.60100828232e-05}


x = distr.keys()
y = distr.values()
#

print(x)
print(y)
pylab.title('Aplication1 q1')
pylab.xlabel('in-degree')
pylab.ylabel('papers')
pylab.grid(True)
pylab.loglog(x,y,'ro')
pylab.show()
